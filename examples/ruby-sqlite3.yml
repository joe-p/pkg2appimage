# Ensure libsqlite3-dev or equivalent package is installed on host before running this recipe
# To validate the output works, run the following: 
#   ./out/rubysqlite3-2.6.6p146.glibc2.14-x86_64.AppImage -r sqlite3 -e "Dir.chdir ENV['OWD']; db = SQLite3::Database.new 'test.db'" && stat `realpath test.db` && rm test.db
app: rubysqlite3

ingredients:
  script:
    # download the required files
    - wget -c https://github.com/AppImage/AppImageKit/releases/download/13/appimagetool-x86_64.AppImage
    - wget -c https://github.com/AppImage/AppImageKit/releases/download/13/AppRun-x86_64
    - wget -c https://raw.githubusercontent.com/AppImage/pkg2appimage/master/excludelist
    
    # download pre-built ruby binaries from rvm.io
    - wget -c https://rvm.io/binaries/ubuntu/20.04/x86_64/ruby-2.6.6.tar.bz2

script:
  # unset ruby-related evnironment variables to prevent collisions with build-host ruby
  - unset GEM_HOME
  - unset MY_RUBY_HOME
  - unset GEM_HOME
  - unset GEM_PATH
  - unset RUBY_VERSION
  - unset IRBRC

  # extract ruby to usr/
  - tar xf ../ruby-*.tar.bz2 --strip-components=1 -C usr/
  
  # add usr/bin to path
  - export PATH=usr/bin/:$PATH 
  
  # install sqlite
  - ./usr/bin/gem install sqlite3
  
  # pristine executable-hooks to account for new binaries
  - ./usr/bin/gem pristine executable-hooks

  # get version from ruby
  - ./usr/bin/ruby --version | cut -d ' ' -f 2 > ../VERSION

  # clear gem cache
  - rm -rf usr/lib/ruby/gems/*/cache

  # copy deps to usr/lib/x86_64-linux-gnu/
  - DEPS=$(ldd ./usr/lib/ruby/*/x86_64-linux/*.so | grep "=> /" | cut -d ">" -f 2 | cut -d " " -f 2 | sort | uniq)
  - mkdir -p usr/lib/x86_64-linux-gnu/
  - cp $DEPS usr/lib/x86_64-linux-gnu/

  # generate .desktop
  - touch rubysqlite3.png
  - cat > rubysqlite3.desktop <<\EOF
  - [Desktop Entry]
  - Type=Application
  - Terminal=true
  - Name=rubysqlite3
  - Exec=ruby 
  - Categories=Development;
  - Icon=rubysqlite3
  - EOF
